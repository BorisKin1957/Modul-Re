'''Найдите все последовательности, которые могут быть номерами телефонов:

    Номер может начинаться с +
    Потом идут цифры
    В каждом номере минимум 11 цифр
    Между цифрами могут быть разделители: ( )-
    Длина разделителя от 0 до 2 символов включительно

Тестовые данные:
Входные данные:

На вход программе подаётся 1 строка.
Выходные данные:

Если это номер телефона - выводите True, иначе - False.'''

import re

regex = (r'\+?[0-9]{1,3}(?:(?:\s\((?:[0-9]{3}\)\s))|(?:\s[0-9]{3}\s)'
         r'|(?:[0-9]{3})|(?:\([0-9]{3}\)))(?:(?:\s?[0-9]{7,})'
         r'|(?:(?:\s?[0-9]{7,}))|(?:[0-9]{3}([\s-])[0-9]{2}\1[0-9]{2}))')

print(bool(re.fullmatch(regex, input())))

import re

regex = r'''
    \+?  # Опциональный знак +
    [0-9]{1,3}  # От 1 до 3 цифр
    (?:  # Начало незахватывающей группы
        (?:\s\([0-9]{3}\)\s)  # Пробел, открывающая скобка, 3 цифры, закрывающая скобка, пробел
        |  # ИЛИ
        (?:\s[0-9]{3}\s)  # Пробел, 3 цифры, пробел
        |  # ИЛИ
        [0-9]{3}  # 3 цифры
        |  # ИЛИ
        \([0-9]{3}\)  # Открывающая скобка, 3 цифры, закрывающая скобка
    )  # Конец незахватывающей группы
    (?:  # Начало незахватывающей группы
        (?:\s?[0-9]{7,})  # Опциональный пробел, от 7 и более цифр
        |  # ИЛИ
        (?:\s?[0-9]{7,})  # Опциональный пробел, от 7 и более цифр
        |  # ИЛИ
        [0-9]{3}([\s-])[0-9]{2}\1[0-9]{2}  # 3 цифры, разделитель, 2 цифры, тот же разделитель, 2 цифры
    )  # Конец незахватывающей группы
'''

print(bool(re.fullmatch(regex, input(), re.VERBOSE)))



