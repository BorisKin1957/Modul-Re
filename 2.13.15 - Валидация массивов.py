'''Найдите все валидные пустые массивы, или массивы с числами. Числом считаем произвольную последовательность из цифр.
Что нужно найти:

Нужно найти последовательности, подходящие по следующим условиям:

    Начинается с [ и заканчиваются на ]
    Внутри может быть пусто, а могут находиться числа
    Числом считаем произвольную последовательность из цифр
    Между числами должны стоять запятые
    Запятые могут быть как и с пробелом, так и без
    После последнего числа может стоять запятая, т.к. такие массивы: [123, 123, ] и [23, ] валидные в Python

Sample Input 1:

[1, 23, 3, 436, 5, 63673, 47][2][][4, 05][1, 2, 3, 4, 5, 6, 7424234234234243242, 5][6246546456][432][0][3240, 00] [402030, 404040]

Sample Output 1:

[1, 23, 3, 436, 5, 63673, 47] [2] [] [4, 05] [1, 2, 3, 4, 5, 6, 7424234234234243242, 5] [6246546456] [432] [0] [3240, 00] [402030, 404040]'''

import re

# Напиши регулярное выражение в regex \(❤‿❤)/
#regex = r'\[(?:[0-9]+(?:,\s?)?)*[0-9]*\]'

'''Ваше регулярное выражение уже достаточно простое и эффективное. 
Однако, его можно немного упростить, убрав ненужные скобки и добавив флаг `re.VERBOSE` для лучшей читаемости. 
Вот упрощенная версия:'''

regex = r'''
    \[  # Начало массива
    (?:  # Начало незахватывающей группы
        [0-9]+  # Число
        (?:,\s?)*  # Запятая с опциональным пробелом
    )*  # Конец незахватывающей группы, повторяется 0 или более раз
    [0-9]*  # Опциональное число после последней запятой
    \]  # Конец массива
'''

result = re.finditer(regex, input(), re.VERBOSE)

for match in result:
    print(match.group(), end=' ')